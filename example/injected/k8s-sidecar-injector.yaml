# This file creates the sidecar injection webhook and the standard Shawarma cluster role
# Note that it assumes that cert-manager is already install in your cluster
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: shawarma-webhook
rules:
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: shawarma
subjects:
- kind: ServiceAccount
  name: shawarma-webhook
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: shawarma-webhook
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shawarma-webhook
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  name: shawarma-webhook
  namespace: kube-system
  labels:
    k8s-app: shawarma-webhook
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: https
    protocol: TCP
  selector:
    k8s-app: shawarma-webhook
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: shawarma-webhook
  namespace: kube-system
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: shawarma-webhook
  namespace: kube-system
spec:
  secretName: shawarma-webhook-certificate
  dnsNames:
  - shawarma-webhook
  - shawarma-webhook.kube-system
  - shawarma-webhook.kube-system.svc
  issuerRef:
    name: shawarma-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shawarma-webhook
  namespace: kube-system
  labels:
    k8s-app: shawarma-webhook
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: shawarma-webhook
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: shawarma-webhook
    spec:
      serviceAccountName: shawarma-webhook
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
      volumes:
      - name: secrets
        secret:
          secretName: shawarma-webhook-certificate
      containers:
      - name: shawarma-webhook
        imagePullPolicy: Always
        image: centeredge/shawarma-webhook:1.1.1
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: LOG_LEVEL
          value: warn
        ports:
        - name: https
          containerPort: 443
        volumeMounts:
        - name: secrets
          mountPath: /etc/shawarma-webhook/certs
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /health
            port: https
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
        resources:
          requests:
            cpu: "0.5"
            memory: 1Gi
          limits:
            cpu: "0.5"
            memory: 2Gi
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: shawarma-webhook
  labels:
    k8s-app: shawarma-webhook
  annotations:
    cert-manager.io/inject-ca-from: kube-system/shawarma-webhook
webhooks:
- name: "webhook.shawarma.centeredge.io"
  failurePolicy: "Ignore" # we fail "open" if the webhook is down hard
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  namespaceSelector:
    # Require that the namespace have the `shawarma-injection: enabled` label
    matchExpressions:
    - key: shawarma-injection
      operator: In
      values: ["enabled"]
  clientConfig:
    service:
      name: shawarma-webhook
      namespace: kube-system
      path: "/mutate"
  admissionReviewVersions: ["v1beta1", "v1"]
  sideEffects: None
